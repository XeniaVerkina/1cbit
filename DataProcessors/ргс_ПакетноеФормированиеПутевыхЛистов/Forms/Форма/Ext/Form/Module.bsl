//Заполнить ТЧ
&НаКлиенте
Процедура Заполнить(Команда)
	//Очистка ТЧ
	Объект.ЗаказыНаТехнику.Очистить();
	//Отбор по Периоду
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда	
		Сообщить("Не задан период");
		Возврат;
	КонецЕсли;
	ЗаполнитьНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
   	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	бит_мат_ЗаказНаТехнику.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.бит_мат_ЗаказНаТехнику КАК бит_мат_ЗаказНаТехнику
		|ГДЕ
		|	бит_мат_ЗаказНаТехнику.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (&НеПроверятьОрганизацию
		|			ИЛИ бит_мат_ЗаказНаТехнику.Организация = &Организация)
		|	И (&НеПроверятьПодразделение
		|			ИЛИ бит_мат_ЗаказНаТехнику.Подразделение = &Подразделение)
		|	И (&НеПроверятьОбъект
		|			ИЛИ бит_мат_ЗаказНаТехнику.Объект = &Объект)
		|	И НЕ бит_мат_ЗаказНаТехнику.ргс_ПутевыеЛистыСозданы
		|	И бит_мат_ЗаказНаТехнику.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДатаНачала", Объект.Период.ДатаНачала); 
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("НеПроверятьОбъект", ?(ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа), Ложь, Истина));
	Запрос.УстановитьПараметр("НеПроверятьОрганизацию", ?(ЗначениеЗаполнено(Объект.Организация), Ложь, Истина));
	Запрос.УстановитьПараметр("НеПроверятьПодразделение", ?(ЗначениеЗаполнено(Объект.Подразделение), Ложь, Истина));
	Запрос.УстановитьПараметр("Объект", Объект.НоменклатурнаяГруппа);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	
		ТЧЗаказыНаТехнику = Объект.ЗаказыНаТехнику.Добавить();	
		ТЧЗаказыНаТехнику.ЗаказНаТехнику = ВыборкаДетальныеЗаписи.Ссылка;			
	КонецЦикла;
КонецПроцедуры

//ОчисткаТЧ
&НаКлиенте
Процедура Очистить(Команда)
	Объект.РезультатОбработки.Очистить();
	Объект.ЗаказыНаТехнику.Очистить();
КонецПроцедуры

//Настройки формы выбора
&НаКлиенте
Процедура Подбор(Команда)
	НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
	
	//Создание отбора
	ГруппаОтбора = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));   
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	//Отбор по созданным ПЛ
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина; 
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ргс_ПутевыеЛистыСозданы");
	ЭлементОтбора.ПравоеЗначение = Ложь; 
	
	//Отбор по поментке на удаление
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина; 
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ПравоеЗначение = Ложь;

	
	//Отбор по Периоду
	Если ЗначениеЗаполнено(Объект.Период) Тогда			
	    ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно; //Как будем сравнивать
		ЭлементОтбора.Использование = Истина; // Устанавливаем галку использования НовыйПолеКомпоновкиДанных  
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата"); //По какому реквизиту будем делать отбор
		ЭлементОтбора.ПравоеЗначение = Объект.Период.ДатаНачала; // И само значение отбора 
		
	    ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование = Истина; 
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		ЭлементОтбора.ПравоеЗначение = Объект.Период.ДатаОкончания;
	КонецЕсли;
	
	//Отбор по Организации
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ПравоеЗначение = Объект.Организация;			
	КонецЕсли;  
	
	//Отбор по Номенклатурной группе
	Если ЗначениеЗаполнено(Объект.НоменклатурнаяГруппа) Тогда
	    ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина; 
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект");
		ЭлементОтбора.ПравоеЗначение = Объект.НоменклатурнаяГруппа; 	
	КонецЕсли; 
		
	//Отбор по Подразделению	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
	    ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина; 
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
		ЭлементОтбора.ПравоеЗначение = Объект.Подразделение; 	
	КонецЕсли;
	
	//Парметры формы выбора
	ПараметрыФормы = Новый Структура("ФиксированныеНастройки, ЗакрыватьПриВыборе, МножественныйВыбор", НастройкиКомпоновки, Ложь, Истина);
	ОткрытьФорму("Документ.бит_мат_ЗаказНаТехнику.ФормаВыбора", ПараметрыФормы, Элементы.ЗаказыНаТехнику);				
КонецПроцедуры  

//Добавление выбранных документов в ТЧ ЗаказыНаТехнику
&НаКлиенте
Процедура ЗаказыНаТехникуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) 
	
	Для Каждого ВыбранныйЭлемент Из ВыбранноеЗначение Цикл
		НайденнаяСтрока = Объект.ЗаказыНаТехнику.НайтиСтроки(новый структура("ЗаказНаТехнику",ВыбранныйЭлемент));
		Если НайденнаяСтрока.Количество() = 0 ИЛИ НайденнаяСтрока = Неопределено Тогда 
			НоваяСтрока = Объект.ЗаказыНаТехнику.Добавить();
			НоваяСтрока.ЗаказНаТехнику = ВыбранныйЭлемент;   
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры
          
//ВыбратьВсе
&НаКлиенте
Процедура ВыбратьВсе(Команда)
    Для Каждого ЗаказыНаТехникуЗаказНаТехнику Из Объект.ЗаказыНаТехнику Цикл
        ЗаказыНаТехникуЗаказНаТехнику.Отметка = Истина;
    КонецЦикла;
КонецПроцедуры

//ОтменитьВыбранные
&НаКлиенте
Процедура ОтменитьВыбранные(Команда)
	Для Каждого ЗаказыНаТехникуЗаказНаТехнику Из Объект.ЗаказыНаТехнику Цикл
        ЗаказыНаТехникуЗаказНаТехнику.Отметка = Ложь;
    КонецЦикла;
КонецПроцедуры	

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка) 
	
	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(Объект.Организация) Тогда

		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Владелец", Объект.Организация);  
		
		
		ПараметрыФормы = Новый Структура("Отбор, ЗакрыватьПриВыборе, РежимВыбора", ПараметрыОтбора, Истина, Истина);

		ОткрытьФорму("Справочник.ПодразделенияОрганизаций.ФормаВыбора", ПараметрыФормы, Элементы.Подразделение); 
		
	Иначе 
		СтандартнаяОбработка = Истина; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Подразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	
КонецПроцедуры


//Кнопка для создание ПЛ
&НаКлиенте
Процедура СформироватьПутевыеЛисты(Команда)
	
	мТабДок = СформироватьПутевыеЛистыНаСервере();
	Для Каждого ЭлементМассива Из мТабДок Цикл 
		ЭлементМассива.Напечатать();	
	КонецЦикла;	
	
	Этаформа.Элементы.Страницы.ТекущаяСтраница = Этаформа.Элементы.ГруппаРезультатОбработки;  
	
КонецПроцедуры

//Код для создание ПЛ
&НаСервере
Функция СформироватьПутевыеЛистыНаСервере()
	Объект.РезультатОбработки.Очистить();
	
	//Запрос
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	бит_мат_ЗаказНаТехнику.Ссылка КАК Ссылка,
			|	бит_мат_ЗаказНаТехнику.ДатаНачала КАК ДатаНачала,
			|	бит_мат_ЗаказНаТехнику.ДатаОкончания КАК ДатаОкончания,
			|	бит_мат_ЗаказНаТехнику.ргс_Смена КАК ргс_Смена,
			|	бит_мат_ЗаказНаТехнику.ргс_СпособОтраженияЗатрат КАК ргс_СпособОтраженияЗатрат,
			|	бит_мат_ЗаказНаТехнику.Организация КАК Организация,
			|	бит_мат_ЗаказНаТехнику.Подразделение КАК Подразделение,
			|	бит_мат_ЗаказНаТехнику.Контрагент КАК Контрагент,
			|	бит_мат_ЗаказНаТехнику.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	бит_мат_ЗаказНаТехнику.Объект КАК Объект,
			|	бит_мат_ЗаказНаТехнику.Регион КАК Регион,
			|	бит_мат_ЗаказНаТехнику.ргс_ВнутреннийЗаказчик КАК ргс_ВнутреннийЗаказчик,
			|	бит_мат_ЗаказНаТехнику.ргс_Механик КАК ргс_Механик,
			|	бит_мат_ЗаказНаТехнику.ргс_Диспетчер КАК ргс_Диспетчер,
			|	бит_мат_ЗаказНаТехникуТребованияКТехнике.Техника КАК Техника,
			|	бит_мат_ЗаказНаТехникуТребованияКТехнике.Номенклатура КАК Номенклатура,
			|	бит_мат_ЗаказНаТехникуТребованияКТехнике.РежимРаботы КАК РежимРаботы,
			|	бит_мат_ЗаказНаТехникуТребованияКТехнике.ргс_Маршрут КАК ргс_Маршрут,
			|	бит_мат_ЗаказНаТехникуТребованияКТехнике.ргс_ВремяПрибытия КАК ргс_ВремяПрибытия,
			|	бит_мат_ЗаказНаТехникуТребованияКТехнике.ргс_ВремяУбытия КАК ргс_ВремяУбытия,
			|	бит_мат_ЗаказНаТехникуТребованияКТехнике.ргс_ВидПеревозки КАК ргс_ВидПеревозки,
			|	бит_мат_ЗаказНаТехникуТребованияКТехнике.ргс_ВидыСообщенияТехники КАК ргс_ВидыСообщенияТехники,
			|	бит_мат_ЗаказНаТехникуТребованияКТехнике.ргс_Водитель КАК ргс_Водитель
			|ИЗ
			|	Документ.бит_мат_ЗаказНаТехнику КАК бит_мат_ЗаказНаТехнику
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.бит_мат_ЗаказНаТехнику.ТребованияКТехнике КАК бит_мат_ЗаказНаТехникуТребованияКТехнике
			|		ПО бит_мат_ЗаказНаТехникуТребованияКТехнике.Ссылка = бит_мат_ЗаказНаТехнику.Ссылка
			|ГДЕ
			|	бит_мат_ЗаказНаТехнику.Ссылка В(&МассивДокументов)
			|ИТОГИ ПО
			|	Ссылка";   
		
		//использовать найтистроки для ТЧ
		СтруктураОтбора = Новый Структура("Отметка", Истина);  
		НайденныеСтроки = Объект.ЗаказыНаТехнику.Выгрузить(,"ЗаказНаТехнику,Отметка");
		НайденныеСтроки = НайденныеСтроки.НайтиСтроки(СтруктураОтбора);

		Запрос.УстановитьПараметр("МассивДокументов", НайденныеСтроки);
						
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		мТД = новый Массив;
		
		Пока Выборка.следующий() Цикл 
			//Выборка - это выборка по ссылкам 
			ДокЗаказНаТехнику = Выборка.Ссылка.ПолучитьОбъект();
			
			//Проверка были ли уже созданы ПЛ
			Если ДокЗаказНаТехнику.ргс_ПутевыеЛистыСозданы = Ложь Тогда 
				
				ДокЗаказНаТехнику.ргс_ПутевыеЛистыСозданы = Истина;
				ДокЗаказНаТехнику.Записать(РежимЗаписиДокумента.Проведение);
				
				ВыборкаТЧ = Выборка.Выбрать();
				Пока выборкаТЧ.следующий() Цикл
					
					//Запрос на доп оборудование
					ЗапросДО = Новый Запрос;
					ЗапросДО.Текст =
					"ВЫБРАТЬ
					|	бит_мат_ДополнительноеОборудованиеСрезПоследних.ДополнительноеОборудование КАК ДополнительноеОборудование
					|ИЗ
					|	РегистрСведений.бит_мат_ДополнительноеОборудование.СрезПоследних(&Период, Техника = &Техника) 
					|   КАК бит_мат_ДополнительноеОборудованиеСрезПоследних";     
					
					ЗапросДО.УстановитьПараметр("Период", ТекущаяДата()); 
					ЗапросДО.УстановитьПараметр("Техника", ВыборкаТЧ.Техника);
					РезультатЗапросаДО = ЗапросДО.Выполнить();
					
					ВыборкаДО = РезультатЗапросаДО.Выбрать();
				
					НовыйДокумент = Документы.бит_мат_ПутевойЛист.СоздатьДокумент();
						
					//Заполняем шапку документа
					НовыйДокумент.Дата = ТекущаяДата(); 
					НовыйДокумент.ДатаВыезда = ВыборкаТЧ.ДатаНачала;
					НовыйДокумент.ДатаВозвращения = ВыборкаТЧ.ДатаОкончания;
					НовыйДокумент.Смена = ВыборкаТЧ.ргс_Смена;
					НовыйДокумент.СпособОтраженияЗатрат = ВыборкаТЧ.ргс_СпособОтраженияЗатрат; 
					НовыйДокумент.Статус = Перечисления.бит_мат_ВидыСтатусовПутевогоЛиста.Сформирован;
					
					//Заполняем страницу "Основная"	левая	
					НовыйДокумент.Организация = ВыборкаТЧ.Организация;
					НовыйДокумент.Подразделение = ВыборкаТЧ.Подразделение;
					НовыйДокумент.Техника = ВыборкаТЧ.Техника; 
					НовыйДокумент.ВидПеревозки = ВыборкаТЧ.ргс_ВидПеревозки;
					
					//Заполняем страницу "Основная"	правая
					НовыйДокумент.Заказчик = ВыборкаТЧ.Контрагент;
					НовыйДокумент.ДоговорКонтрагента = ВыборкаТЧ.ДоговорКонтрагента; 
					НовыйДокумент.ргс_ВнутреннийЗаказчик = ВыборкаТЧ.ргс_ВнутреннийЗаказчик;
					НовыйДокумент.ТехническоеСостояние = Справочники.бит_мат_СостоянияТехники.Исправно; 
					НовыйДокумент.Объект = ВыборкаТЧ.Объект;
					
					////Заполняем ТЧ "ВидыСообщенияТехники"  					
					нСтр = НовыйДокумент.ВидыСообщенияТехники.Добавить(); 
					нСтр.ВидСообщения = ВыборкаТЧ.ргс_ВидыСообщенияТехники; 
					
					//Заполнение показателй работы          
					НовыйДокумент.ДатаПлановаяВыезда = ВыборкаТЧ.ргс_ВремяУбытия;
					НовыйДокумент.ДатаПлановаяВозвращения = ВыборкаТЧ.ргс_ВремяПрибытия;
					
					//Заполняем ТЧ "Ответственные" 
					//Водитель 
					нСтр = НовыйДокумент.Ответственные.Добавить();
					нСтр.ФизЛицо = ВыборкаТЧ.ргс_Водитель;
					нСтр.Роль = Справочники.бит_мат_РолиСотрудников.Водитель;  
					//Механик
					нСтр = НовыйДокумент.Ответственные.Добавить();
					нСтр.ФизЛицо = ВыборкаТЧ.ргс_Механик;
					нСтр.Роль = Справочники.бит_мат_РолиСотрудников.Механик; 
					//Диспетчер	
					нСтр = НовыйДокумент.Ответственные.Добавить();
					нСтр.ФизЛицо = ВыборкаТЧ.ргс_Диспетчер; 
					нСтр.Роль = Справочники.бит_мат_РолиСотрудников.Диспетчер;  
					
					//Заполняем ТЧ "Дополнительное оборудование"
					Пока ВыборкаДО.следующий() Цикл
					
						нСтр = НовыйДокумент.ДополнительноеОборудование.Добавить();
						нСтр.Техника = ВыборкаДО.ДополнительноеОборудование;
					
					КонецЦикла;  
					
					//Заполняем ТЧ "Задания"
					нСтр = НовыйДокумент.Задания.Добавить();
					нСтр.Заказчик = ВыборкаТЧ.Контрагент;
					нСтр.Задание = ВыборкаТЧ.Номенклатура;
					нСтр.Маршрут = ВыборкаТЧ.ргс_Маршрут;     
					нСтр.ВремяПрибытия = ВыборкаТЧ.ргс_ВремяПрибытия;   
					нСтр.ВремяУбытия = ВыборкаТЧ.ргс_ВремяУбытия;
										
					НовыйДокумент.Записать();
					
					НстрРезультат = объект.РезультатОбработки.Добавить();
					НстрРезультат.Результат = НовыйДокумент.Ссылка;
					
					Элементы.ГруппаИстория.Видимость = Истина;
					НстрРезультат2 = объект.История.Добавить();
					НстрРезультат2.Результат = НовыйДокумент.Ссылка;
					
					//Печать сформированных путевых листов
					КомандаПечати = НовыйДокумент.Техника.ргс_ОсновнаяФормаПутевогоЛиста.Комментарий;  
					РеквизитТипХранилище = НовыйДокумент.Техника.ргс_ОсновнаяФормаПутевогоЛиста.ХранилищеВнешнейОбработки;

					ВнешняяОбработка = РеквизитТипХранилище.Получить();
					ВнешняяОбработкаОбъект = ВнешняяОбработка.ПолучитьОбъект();  
					
					ИмяФайла = ПолучитьИмяВременногоФайла();
					ДвоичныеДанные = ВнешняяОбработкаОбъект.ХранилищеОбработки.Получить();
					ДвоичныеДанные.Записать(ИмяФайла);
					Обработка = ВнешниеОбработки.Создать(ИмяФайла);

					МассивОбъектов = Новый Массив();
					МассивОбъектов.Добавить(НовыйДокумент.Ссылка);

					КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(КомандаПечати);
					ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();   
					//ПараметрыПечати = Новый Структура; 
					
					ОбъектыПечати = Новый СписокЗначений;
					Обработка.Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
					
					Для Каждого Строка Из КоллекцияПечатныхФорм Цикл
						
						ТабличныйДокумент = Строка.ТабличныйДокумент;   	
						Если Не ТабличныйДокумент = Неопределено Тогда
							
							мТД.Добавить(ТабличныйДокумент);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			ИначеЕсли ДокЗаказНаТехнику.ргс_ПутевыеЛистыСозданы = Истина Тогда  
				Сообщить("По документу " + ДокЗаказНаТехнику.Ссылка + " уже созданы путевые листы"); 
				Продолжить;	
			КонецЕсли; 	
		КонецЦикла; 
		Возврат мТД;
КонецФункции  